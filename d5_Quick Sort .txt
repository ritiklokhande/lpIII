d5_Quick Sort 

java :

import java.util.*;

public class QuickSort {

    public static void quickSortDeterministic(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partitionDeterministic(arr, low, high);
            quickSortDeterministic(arr, low, pi - 1);
            quickSortDeterministic(arr, pi + 1, high);
        }
    }

    private static int partitionDeterministic(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                swap(arr, i, j);
            }
        }
        swap(arr, i + 1, high);
        return i + 1;
    }

    public static void quickSortRandomized(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partitionRandomized(arr, low, high);
            quickSortRandomized(arr, low, pi - 1);
            quickSortRandomized(arr, pi + 1, high);
        }
    }

    private static int partitionRandomized(int[] arr, int low, int high) {
        int pivotIndex = new Random().nextInt(high - low + 1) + low;
        swap(arr, pivotIndex, high);
        return partitionDeterministic(arr, low, high);
    }

    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public static void main(String[] args) {
        int[] arr1 = {10, 80, 30, 90, 40, 50, 70};
        int[] arr2 = arr1.clone();
        quickSortDeterministic(arr1, 0, arr1.length - 1);
        quickSortRandomized(arr2, 0, arr2.length - 1);
        System.out.println("Deterministic QuickSort: " + Arrays.toString(arr1));
        System.out.println("Randomized QuickSort: " + Arrays.toString(arr2));
    }
}


cpp :


#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

void swap(int arr[], int i, int j) {
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

int partitionDeterministic(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(arr, i, j);
        }
    }
    swap(arr, i + 1, high);
    return i + 1;
}

void quickSortDeterministic(int arr[], int low, int high) {
    if (low < high) {
        int pi = partitionDeterministic(arr, low, high);
        quickSortDeterministic(arr, low, pi - 1);
        quickSortDeterministic(arr, pi + 1, high);
    }
}

int partitionRandomized(int arr[], int low, int high) {
    int pivotIndex = rand() % (high - low + 1) + low;
    swap(arr, pivotIndex, high);
    return partitionDeterministic(arr, low, high);
}

void quickSortRandomized(int arr[], int low, int high) {
    if (low < high) {
        int pi = partitionRandomized(arr, low, high);
        quickSortRandomized(arr, low, pi - 1);
        quickSortRandomized(arr, pi + 1, high);
    }
}

int main() {
    srand(time(0));
    int arr1[] = {10, 80, 30, 90, 40, 50, 70};
    int arr2[] = {10, 80, 30, 90, 40, 50, 70};
    int n = sizeof(arr1) / sizeof(arr1[0]);
    quickSortDeterministic(arr1, 0, n - 1);
    quickSortRandomized(arr2, 0, n - 1);
    cout << "Deterministic QuickSort: ";
    for (int i = 0; i < n; i++) cout << arr1[i] << " ";
    cout << endl;
    cout << "Randomized QuickSort: ";
    for (int i = 0; i < n; i++) cout << arr2[i] << " ";
    cout << endl;
    return 0;
}
